// ================================================================
// üìÅ utils/invitation.utils.ts
// ================================================================

import { FormData, ValidationResult } from '../types/invitation.types';
import { EVENT_INFO, VALIDATION_MESSAGES, PHONE_CONFIG } from '../constants/invitation.constants';
import "../../../../utils/logInterceptor";

/**
 * Formatea un n√∫mero de tel√©fono mexicano con espacios
 * @param value - N√∫mero de tel√©fono sin formato
 * @param previousValue - Valor anterior para detectar si est√° borrando
 * @returns N√∫mero formateado (XXX XXX XXXX)
 */
export const formatMexicanPhone = (value: string, previousValue?: string): string => {
  // Remover todo lo que no sean n√∫meros
  const numbers = value.replace(/\D/g, "");
  
  // Si el valor actual es m√°s corto que el anterior, el usuario est√° borrando
  const isDeleting = previousValue && value.length < previousValue.length;
  
  // Limitar a 10 d√≠gitos m√°ximo
  const limited = numbers.slice(0, PHONE_CONFIG.DIGITS_REQUIRED);
  
  // Si est√° borrando y el cursor est√° en un espacio, permitir que se borre
  if (isDeleting) {
    // Simplemente formatear los n√∫meros que quedan
    if (limited.length >= 6) {
      return `${limited.slice(0, 3)} ${limited.slice(3, 6)} ${limited.slice(6)}`;
    } else if (limited.length >= 3) {
      return `${limited.slice(0, 3)} ${limited.slice(3)}`;
    }
    return limited;
  }
  
  // Formatear normalmente cuando est√° escribiendo
  if (limited.length >= 6) {
    return `${limited.slice(0, 3)} ${limited.slice(3, 6)} ${limited.slice(6)}`;
  } else if (limited.length >= 3) {
    return `${limited.slice(0, 3)} ${limited.slice(3)}`;
  }
  return limited;
};

/**
 * Genera el mensaje de WhatsApp personalizado
 * @param formData - Datos del formulario
 * @returns Mensaje formateado para WhatsApp
 */
export const generateWhatsAppMessage = (formData: FormData): string => {
  console.log('üìù [MESSAGE] Generando mensaje de WhatsApp...');
  console.log('üìã [MESSAGE] Datos recibidos:', {
    guestName: formData.guestName,
    personalMessage: formData.personalMessage,
    personalMessageLength: formData.personalMessage?.length,
    numberOfGuests: formData.numberOfGuests,
    guestRelation: formData.guestRelation
  });

  const guestText = parseInt(formData.numberOfGuests) === 1 ? 'persona' : 'personas';
  
  // Agregar timestamp para evitar cache de WhatsApp
  const timestamp = new Date().toLocaleTimeString('es-MX', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });

  const message = `üëë ¬°Hola ${formData.guestName}! üëë

${formData.personalMessage}

Tienes una invitaci√≥n especial a la Quincea√±era de:
‚ú® ${EVENT_INFO.quinceaneraName} ‚ú®

üìÖ Fecha: ${EVENT_INFO.date}
üïñ Hora: ${EVENT_INFO.time}
üìç Lugar: ${EVENT_INFO.venue}
üë• N√∫mero de invitados: ${formData.numberOfGuests} ${guestText}

Ver tu invitaci√≥n m√°gica aqu√≠:
üëâ ${EVENT_INFO.invitationUrl}

üíú ¬°Espero que celebres con nosotros este d√≠a tan especial!

Con cari√±o,
${EVENT_INFO.quinceaneraName} üéâ

üì§ Enviado: ${timestamp}`;

  console.log('üìù [MESSAGE] Mensaje generado (primeros 200 chars):', message.substring(0, 200) + '...');
  console.log('üìä [MESSAGE] Estad√≠sticas del mensaje:', {
    messageLength: message.length,
    includesPersonalMessage: message.includes(formData.personalMessage),
    includesGuestName: message.includes(formData.guestName),
    personalMessageStart: message.indexOf(formData.personalMessage),
    personalMessageEnd: message.indexOf(formData.personalMessage) + formData.personalMessage.length,
    includesTimestamp: message.includes(timestamp),
    originalPersonalMessage: formData.personalMessage
  });

  // Verificaci√≥n adicional de integridad del mensaje
  if (!message.includes(formData.personalMessage)) {
    console.error('üö® [MESSAGE] ¬°CR√çTICO! El mensaje personal no est√° incluido en el mensaje final');
    console.error('üîç [MESSAGE] Mensaje personal original:', formData.personalMessage);
    console.error('üîç [MESSAGE] Mensaje final:', message);
  } else {
    console.log('‚úÖ [MESSAGE] Verificaci√≥n exitosa: Mensaje personal incluido correctamente');
  }

  return message;
};

/**
 * Valida todos los campos del formulario con validaciones estrictas
 * @param formData - Datos del formulario a validar
 * @returns Resultado de la validaci√≥n con c√≥digo de error espec√≠fico
 */
export const validateForm = (formData: FormData): ValidationResult & { errorCode?: string } => {
  console.log('üîç [VALIDATION] Iniciando validaci√≥n estricta del formulario...');
  
  // 1. Verificar nombre
  if (!formData.guestName || !formData.guestName.trim()) {
    console.error('‚ùå [VALIDATION] Nombre vac√≠o');
    return { 
      isValid: false, 
      message: 'El nombre del invitado es obligatorio',
      errorCode: 'MISSING_NAME'
    };
  }
  
  if (formData.guestName.trim().length < 2) {
    console.error('‚ùå [VALIDATION] Nombre muy corto');
    return { 
      isValid: false, 
      message: 'El nombre debe tener al menos 2 caracteres',
      errorCode: 'INVALID_NAME_LENGTH'
    };
  }
  
  // 2. Verificar tel√©fono (OBLIGATORIO)
  if (!formData.whatsappNumber || !formData.whatsappNumber.trim()) {
    console.error('‚ùå [VALIDATION] Tel√©fono vac√≠o');
    return { 
      isValid: false, 
      message: 'El n√∫mero de tel√©fono es obligatorio',
      errorCode: 'MISSING_PHONE'
    };
  }
  
  // Validar formato de tel√©fono (exactamente 10 d√≠gitos)
  const cleanNumber = formData.whatsappNumber.replace(/\D/g, "");
  if (cleanNumber.length !== PHONE_CONFIG.DIGITS_REQUIRED) {
    console.error('‚ùå [VALIDATION] Tel√©fono inv√°lido', { 
      original: formData.whatsappNumber,
      clean: cleanNumber,
      length: cleanNumber.length 
    });
    return { 
      isValid: false, 
      message: `El n√∫mero debe tener exactamente ${PHONE_CONFIG.DIGITS_REQUIRED} d√≠gitos`,
      errorCode: 'INVALID_PHONE_FORMAT'
    };
  }
  
  // 3. Verificar n√∫mero de invitados
  if (!formData.numberOfGuests || !formData.numberOfGuests.trim()) {
    console.error('‚ùå [VALIDATION] N√∫mero de invitados vac√≠o');
    return { 
      isValid: false, 
      message: 'El n√∫mero de invitados es obligatorio',
      errorCode: 'MISSING_GUEST_COUNT'
    };
  }
  
  const guestCount = parseInt(formData.numberOfGuests);
  if (isNaN(guestCount) || guestCount < 1 || guestCount > 10) {
    console.error('‚ùå [VALIDATION] N√∫mero de invitados inv√°lido');
    return { 
      isValid: false, 
      message: 'El n√∫mero de invitados debe ser entre 1 y 10',
      errorCode: 'INVALID_GUEST_COUNT'
    };
  }
  
  // 4. Verificar mensaje personalizado
  if (!formData.personalMessage || !formData.personalMessage.trim()) {
    console.error('‚ùå [VALIDATION] Mensaje personal vac√≠o');
    return { 
      isValid: false, 
      message: 'El mensaje personalizado es obligatorio',
      errorCode: 'MISSING_MESSAGE'
    };
  }
  
  if (formData.personalMessage.trim().length < 10) {
    console.error('‚ùå [VALIDATION] Mensaje personal muy corto');
    return { 
      isValid: false, 
      message: 'El mensaje debe tener al menos 10 caracteres',
      errorCode: 'INVALID_MESSAGE_LENGTH'
    };
  }
  
  console.log('‚úÖ [VALIDATION] Validaci√≥n exitosa');
  return { isValid: true };
};

/**
 * Valida espec√≠ficamente el n√∫mero de tel√©fono
 * @param phoneNumber - N√∫mero a validar
 * @returns Resultado de la validaci√≥n
 */
export const validatePhoneNumber = (phoneNumber: string): ValidationResult => {
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  
  if (!phoneNumber.trim()) {
    return { isValid: false, message: "N√∫mero de tel√©fono es requerido" };
  }
  
  if (cleanNumber.length !== PHONE_CONFIG.DIGITS_REQUIRED) {
    return { 
      isValid: false, 
      message: VALIDATION_MESSAGES.INVALID_PHONE_FORMAT 
    };
  }
  
  return { isValid: true };
};

/**
 * Env√≠a la invitaci√≥n por WhatsApp
 * @param formData - Datos del formulario
 */
export const sendWhatsAppInvitation = (formData: FormData): void => {
  const validation = validateForm(formData);
  if (!validation.isValid) {
    console.error('‚ùå Validaci√≥n fallida:', validation.message);
    return;
  }
  
  const message = generateWhatsAppMessage(formData);
  const cleanNumber = formData.whatsappNumber.replace(/\D/g, "");
  const mexicanNumber = `52${cleanNumber}`;
  const whatsappURL = `https://wa.me/${mexicanNumber}?text=${encodeURIComponent(message)}`;
  
  window.open(whatsappURL, "_blank");
};

/**
 * Genera nombre de archivo para la descarga
 * @param guestName - Nombre del invitado
 * @returns Nombre de archivo formateado
 */
export const generateFileName = (guestName: string): string => {
  const cleanName = guestName
    .replace(/\s+/g, '_')
    .toLowerCase()
    .replace(/[^a-z0-9_]/g, '');
  
  return `invitacion_aurora_${cleanName}.png`;
};

/**
 * Verifica si todos los campos requeridos est√°n completos
 * @param formData - Datos del formulario
 * @returns true si todos los campos requeridos est√°n completos
 */
export const areRequiredFieldsComplete = (formData: FormData): boolean => {
  return !!(
    formData.guestName &&
    formData.personalMessage &&
    formData.numberOfGuests &&
    formData.whatsappNumber
  );
};

/**
 * Limpia y formatea texto para uso seguro
 * @param text - Texto a limpiar
 * @returns Texto limpio y seguro
 */
export const sanitizeText = (text: string): string => {
  return text.trim().replace(/\s+/g, ' ');
};

/**
 * Convierte n√∫mero de invitados a texto legible
 * @param numberOfGuests - N√∫mero como string
 * @returns Texto descriptivo (persona/personas)
 */
export const formatGuestText = (numberOfGuests: string): string => {
  const num = parseInt(numberOfGuests);
  return num === 1 ? 'persona' : 'personas';
};

/**
 * Valida que el nombre del invitado sea v√°lido
 * @param name - Nombre a validar
 * @returns Resultado de la validaci√≥n
 */
export const validateGuestName = (name: string): ValidationResult => {
  const trimmedName = name.trim();
  
  if (!trimmedName) {
    return { isValid: false, message: "El nombre del invitado es requerido" };
  }
  
  if (trimmedName.length < 2) {
    return { isValid: false, message: "El nombre debe tener al menos 2 caracteres" };
  }
  
  if (trimmedName.length > 50) {
    return { isValid: false, message: "El nombre no puede exceder 50 caracteres" };
  }
  
  return { isValid: true };
};

/**
 * Valida que el mensaje personal sea v√°lido
 * @param message - Mensaje a validar
 * @returns Resultado de la validaci√≥n
 */
export const validatePersonalMessage = (message: string): ValidationResult => {
  const trimmedMessage = message.trim();
  
  if (!trimmedMessage) {
    return { isValid: false, message: "El mensaje personal es requerido" };
  }
  
  if (trimmedMessage.length < 10) {
    return { isValid: false, message: "El mensaje debe tener al menos 10 caracteres" };
  }
  
  if (trimmedMessage.length > 500) {
    return { isValid: false, message: "El mensaje no puede exceder 500 caracteres" };
  }
  
  return { isValid: true };
};

/**
 * Crea o actualiza un invitado en la base de datos al enviar invitaci√≥n
 * @param formData - Datos del formulario de invitaci√≥n
 * @returns Promise<boolean> - true si fue exitoso
 */
export const createOrUpdateGuestFromInvitation = async (formData: FormData): Promise<boolean> => {
  console.log('üóÑÔ∏è [BD] Iniciando registro de invitado en base de datos...');
  
  try {
    // Mapear guestRelation a los valores v√°lidos del modelo
    const relationMap: Record<string, string> = {
      'familia': 'familia',
      'amigos': 'amigos', 
      'escuela': 'escuela',
      'trabajo': 'trabajo',
      'otros': 'otros',
      'amigo': 'amigos', // Mapeo adicional
      'familiar': 'familia'
    };

    const cleanPhone = formData.whatsappNumber.replace(/\D/g, '');
    const mappedRelation = relationMap[formData.guestRelation.toLowerCase()] || 'otros';

    // Preparar datos del invitado seg√∫n esquema de GuestsManagement
    const guestData = {
      name: formData.guestName.trim(),
      phone: cleanPhone, // Solo n√∫meros
      relation: mappedRelation,
      personalInvitation: {
        sent: true,
        sentAt: new Date(),
        message: formData.personalMessage.trim(),
        numberOfGuests: parseInt(formData.numberOfGuests) || 1
      }
    };

    console.log('ÔøΩ [BD] Datos preparados para BD:', {
      name: guestData.name,
      phone: guestData.phone,
      phoneLength: guestData.phone.length,
      relation: guestData.relation,
      originalRelation: formData.guestRelation,
      numberOfGuests: guestData.personalInvitation.numberOfGuests,
      messageLength: guestData.personalInvitation.message.length
    });

    console.log('üì§ [BD] Enviando petici√≥n POST a /api/guests...');

    // Intentar crear o actualizar el invitado
    const response = await fetch('/api/guests', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(guestData),
    });

    console.log('üì• [BD] Respuesta recibida:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      headers: Object.fromEntries(response.headers.entries())
    });

    // Parsear respuesta siempre (tanto exitosa como error)
    let result;
    try {
      result = await response.json();
    } catch (parseError) {
      console.error('üí• [BD] Error parseando respuesta JSON:', parseError);
      throw new Error('Error de comunicaci√≥n con el servidor');
    }
    
    console.log('üìã [BD] Resultado parseado:', {
      success: result.success,
      hasData: !!result.data,
      error: result.error,
      errorCode: result.errorCode,
      dataName: result.data?.name
    });

    if (!response.ok) {
      console.error('‚ùå [BD] Response no OK:', {
        status: response.status,
        statusText: response.statusText,
        error: result.error,
        errorCode: result.errorCode
      });
      
      // Crear un error estructurado que incluya la informaci√≥n de la API
      const apiError = new Error(result.error || 'Error desconocido');
      (apiError as any).response = {
        status: response.status,
        statusText: response.statusText,
        json: () => Promise.resolve(result)
      };
      (apiError as any).apiError = result;
      throw apiError;
    }

    if (result.success) {
      console.log('‚úÖ [BD] Invitado registrado autom√°ticamente:', result.data.name);
      return true;
    } else {
      console.error('‚ùå [BD] Error al registrar invitado sin response error:', result.error);
      
      // Si la respuesta es OK pero success es false, tambi√©n lanzar error
      const apiError = new Error(result.error || 'Error en el proceso de registro');
      (apiError as any).apiError = result;
      throw apiError;
    }
  } catch (error) {
    console.error('üí• [BD] Error de conexi√≥n al registrar invitado:', error);
    console.error('üîç [BD] Detalles del error de conexi√≥n:', {
      name: (error as Error)?.name,
      message: (error as Error)?.message,
      stack: (error as Error)?.stack
    });

    // Si ya es un error de API estructurado, re-lanzarlo
    if ((error as any).apiError || (error as any).response) {
      throw error;
    }

    // Si es un error de conexi√≥n/red, crear error estructurado
    const connectionError = new Error('Error de conexi√≥n con el servidor');
    (connectionError as any).connectionError = true;
    (connectionError as any).originalError = error;
    throw connectionError;
  }
};

/**
 * Env√≠a la invitaci√≥n por WhatsApp y registra autom√°ticamente en la BD
 * @param formData - Datos del formulario
 * @returns Promise<boolean> - true si el env√≠o fue exitoso
 */
export const sendWhatsAppInvitationWithRegistration = async (formData: FormData): Promise<boolean> => {
  console.log('üîÑ [MAIN] Iniciando sendWhatsAppInvitationWithRegistration...');
  console.log('üìã [MAIN] FormData recibido completo:', {
    guestName: formData.guestName,
    personalMessage: formData.personalMessage,
    personalMessagePreview: formData.personalMessage ? formData.personalMessage.substring(0, 50) + '...' : 'VAC√çO',
    numberOfGuests: formData.numberOfGuests,
    whatsappNumber: formData.whatsappNumber,
    guestRelation: formData.guestRelation,
    allFieldsPresent: !!(formData.guestName && formData.personalMessage && formData.numberOfGuests && formData.whatsappNumber)
  });
  
  const validation = validateForm(formData);
  if (!validation.isValid) {
    console.error('‚ùå [MAIN] Validaci√≥n fallida:', validation.message);
    console.error('üìã [MAIN] Datos de validaci√≥n:', {
      guestName: formData.guestName || 'VAC√çO',
      personalMessage: formData.personalMessage || 'VAC√çO',
      numberOfGuests: formData.numberOfGuests || 'VAC√çO',
      whatsappNumber: formData.whatsappNumber || 'VAC√çO',
      phoneClean: formData.whatsappNumber?.replace(/\D/g, "") || 'VAC√çO',
      phoneLength: formData.whatsappNumber?.replace(/\D/g, "").length || 0
    });
    return false;
  }
  
  console.log('‚úÖ [MAIN] Validaci√≥n exitosa, procediendo...');
  
  try {
    // 1. Registrar invitado en la base de datos (obligatorio ahora)
    console.log('üì§ [MAIN] Intentando registrar invitado en BD...');
    const dbResult = await createOrUpdateGuestFromInvitation(formData);
    
    if (dbResult) {
      console.log('‚úÖ [MAIN] Invitado registrado en BD exitosamente');
    }
    
    // Si llegamos aqu√≠, el registro fue exitoso, continuar con WhatsApp
    console.log('üì± [MAIN] Procediendo con env√≠o de WhatsApp...');
    
    // 2. Generar mensaje y enviar por WhatsApp
    console.log('üì± [WHATSAPP] Generando mensaje y URL de WhatsApp...');
    const message = generateWhatsAppMessage(formData);
    const cleanNumber = formData.whatsappNumber.replace(/\D/g, "");
    const mexicanNumber = `521${cleanNumber}`; // Corregido: usar 521 para WhatsApp
    const encodedMessage = encodeURIComponent(message);
    const whatsappURL = `https://wa.me/${mexicanNumber}?text=${encodedMessage}`;
    
    console.log('üìã [WHATSAPP] Detalles del mensaje:', {
      cleanNumber: cleanNumber,
      mexicanNumber: mexicanNumber,
      messageLength: message.length,
      encodedLength: encodedMessage.length,
      urlLength: whatsappURL.length,
      urlTruncated: whatsappURL.length > 8000 ? 'URL MUY LARGA' : 'OK'
    });
    
    console.log('ÔøΩ [WHATSAPP] Mensaje sin codificar (primeros 300 chars):', message.substring(0, 300) + '...');
    console.log('üîó [WHATSAPP] Mensaje codificado (primeros 300 chars):', encodedMessage.substring(0, 300) + '...');
    console.log('üåê [WHATSAPP] URL generada (primeros 200 chars):', whatsappURL.substring(0, 200) + '...');
    
    // 3. Verificar si el navegador permite popup
    console.log('üîì [Utils] Verificando si se pueden abrir popups...');
    
    // 4. Abrir WhatsApp
    console.log('üöÄ [WHATSAPP] Abriendo WhatsApp...');
    
    let newWindow: Window | null = null;
    
    // Verificar si la URL es muy larga para WhatsApp
    if (whatsappURL.length > 8192) { // L√≠mite t√≠pico de URL en navegadores
      console.warn('‚ö†Ô∏è [WHATSAPP] URL muy larga, podr√≠a ser truncada:', whatsappURL.length + ' caracteres');
      
      // Crear versi√≥n m√°s corta del mensaje (priorizando el mensaje personal)
      const shortMessage = `üëë ${formData.guestName} üëë

${formData.personalMessage}

üéâ Quincea√±era de ${EVENT_INFO.quinceaneraName}
üìÖ ${EVENT_INFO.date} - ${EVENT_INFO.time}
üìç ${EVENT_INFO.venue}
üë• ${formData.numberOfGuests} ${parseInt(formData.numberOfGuests) === 1 ? 'persona' : 'personas'}

üëâ Ver invitaci√≥n: ${EVENT_INFO.invitationUrl}

Con cari√±o üíú`;

      const shortEncodedMessage = encodeURIComponent(shortMessage);
      const shortWhatsappURL = `https://wa.me/${mexicanNumber}?text=${shortEncodedMessage}`;
      
      console.log('üìù [WHATSAPP] Usando mensaje corto (PRIORIZA MENSAJE PERSONAL):', {
        shortMessageLength: shortMessage.length,
        shortEncodedLength: shortEncodedMessage.length,
        shortUrlLength: shortWhatsappURL.length,
        includesPersonalMessage: shortMessage.includes(formData.personalMessage)
      });
      
      console.log('‚ú® [WHATSAPP] Mensaje corto generado:', shortMessage);
      
      newWindow = window.open(shortWhatsappURL, "_blank");
    } else {
      newWindow = window.open(whatsappURL, "_blank");
    }
    
    // 5. Verificar si el popup fue bloqueado
    if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') {
      console.error('üö´ [WHATSAPP] Popup bloqueado por el navegador');
      console.warn('‚ö†Ô∏è [WHATSAPP] Intentando alternativa - cambiar ubicaci√≥n actual');
      
      // Alternativa: usar location.href como fallback
      const urlToUse = whatsappURL.length > 8192 ? 
        `https://wa.me/${mexicanNumber}?text=${encodeURIComponent(`üëë Hola ${formData.guestName}! ${formData.personalMessage} Ver invitaci√≥n: ${EVENT_INFO.invitationUrl}`)}` : 
        whatsappURL;
        
      if (confirm('El popup fue bloqueado. ¬øQuieres abrir WhatsApp en esta pesta√±a?')) {
        window.location.href = urlToUse;
      }
      return false;
    }
    
    console.log('‚úÖ [WHATSAPP] WhatsApp abierto exitosamente');
    
    // 6. Verificar que la ventana sigue abierta despu√©s de un momento
    setTimeout(() => {
      if (newWindow && !newWindow.closed) {
        console.log('‚úÖ [WHATSAPP] Confirmado: WhatsApp sigue abierto despu√©s de 1 segundo');
      } else {
        console.warn('‚ö†Ô∏è [WHATSAPP] La ventana de WhatsApp se cerr√≥ r√°pidamente');
      }
    }, 1000);
    
    return true;
  } catch (error: any) {
    console.error('‚ùå [MAIN] Error en el proceso:', error);
    
    // Si es un error de BD, marcarlo para manejo especial en el componente
    if (error.apiError || error.connectionError || error.response) {
      console.error('ÔøΩ [MAIN] Error de BD detectado, ser√° manejado por modal');
      (error as any).isBdError = true;
      throw error;
    }
    
    // Error gen√©rico de WhatsApp o proceso
    console.error('ÔøΩ [MAIN] Error cr√≠tico general:', error);
    console.error('üîç [MAIN] Stack trace:', (error as Error)?.stack);
    
    return false;
  }
};