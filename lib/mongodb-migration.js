/**
 * üîå Conexi√≥n MongoDB para Scripts de Migraci√≥n
 * 
 * Versi√≥n simplificada para uso en scripts Node.js
 */

import mongoose from 'mongoose';
import dotenv from 'dotenv';

/**
 * Conecta a MongoDB usando la configuraci√≥n del entorno
 */
async function connectToMongoDB() {
  try {
    // Cargar variables de entorno
    dotenv.config({ path: '.env.local' });
    
    const mongoUri = process.env.MONGODB_URI;
    
    if (!mongoUri) {
      throw new Error('MONGODB_URI no est√° configurado en .env.local');
    }
    
    // Opciones de conexi√≥n optimizadas para scripts
    const options = {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    };
    
    await mongoose.connect(mongoUri, options);
    
    console.log('‚úÖ Conectado a MongoDB Atlas');
    
    // Manejar eventos de conexi√≥n
    mongoose.connection.on('error', (error) => {
      console.error('‚ùå Error de conexi√≥n MongoDB:', error);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('üîå Desconectado de MongoDB');
    });
    
    return mongoose.connection;
    
  } catch (error) {
    console.error('üí• Error conectando a MongoDB:', error.message);
    throw error;
  }
}

/**
 * Cierra la conexi√≥n a MongoDB
 */
async function disconnectFromMongoDB() {
  try {
    await mongoose.connection.close();
    console.log('üëã Conexi√≥n MongoDB cerrada');
  } catch (error) {
    console.error('‚ùå Error cerrando conexi√≥n:', error.message);
  }
}

/**
 * Verifica si la conexi√≥n est√° activa
 */
function isConnected() {
  return mongoose.connection.readyState === 1;
}

export {
  connectToMongoDB,
  disconnectFromMongoDB,
  isConnected,
  mongoose
};
