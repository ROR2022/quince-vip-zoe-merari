/**
 * üéØ Utilidades de Fuzzy Matching para Sistema de Confirmaci√≥n Autom√°tica
 * 
 * Este m√≥dulo implementa algoritmos de b√∫squeda inteligente para encontrar
 * coincidencias de nombres de invitados, incluso con errores de tipeo o variaciones.
 * 
 * Funcionalidades:
 * - Normalizaci√≥n de texto (acentos, espacios, case)
 * - Algoritmo Levenshtein Distance para calcular similitud
 * - B√∫squeda inteligente con threshold configurable
 * - Manejo de casos edge y m√∫ltiples coincidencias
 * 
 * @author Sistema de Invitaciones VIP
 * @date 26 de agosto, 2025
 * @version 1.0
 */

import { IGuest } from '@/models/Guest';

// üéöÔ∏è Configuraci√≥n del sistema
export const FUZZY_CONFIG = {
  SIMILARITY_THRESHOLD: 80, // Porcentaje m√≠nimo para considerar match
  MIN_NAME_LENGTH: 2,       // Longitud m√≠nima del nombre
  MAX_NAME_LENGTH: 100,     // Longitud m√°xima del nombre
  EXACT_MATCH_BONUS: 5      // Bonus para coincidencias exactas (case insensitive)
} as const;

// üìã Interfaces para resultados de b√∫squeda
export interface MatchResult {
  guest: IGuest;
  similarity: number;
  isExactMatch: boolean;
  matchType: 'exact' | 'fuzzy' | 'partial';
  normalizedSearchName: string;
  normalizedGuestName: string;
  // Nuevos campos para b√∫squeda multi-campo
  matchMethod?: 'phone' | 'name' | 'name_with_phone_conflict';
  phoneMatch?: boolean;
  nameSimilarity?: number;
  hasConflict?: boolean;
}

export interface SearchStats {
  totalGuests: number;
  searchTime: number;
  candidatesEvaluated: number;
  bestSimilarity: number;
  matchFound: boolean;
}

/**
 * üßπ Normaliza texto removiendo acentos, espacios extra y caracteres especiales
 * @param text - Texto a normalizar
 * @returns Texto normalizado para comparaci√≥n
 */
export function normalizeText(text: string): string {
  if (!text || typeof text !== 'string') {
    return '';
  }

  return text
    // Convertir a min√∫sculas
    .toLowerCase()
    // Remover acentos y tildes
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    // Remover caracteres especiales, mantener solo letras, n√∫meros y espacios
    .replace(/[^a-z0-9\s]/g, ' ')
    // Remover espacios extra y trimear
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * üî¢ Calcula la distancia de Levenshtein entre dos strings
 * 
 * El algoritmo de Levenshtein mide el n√∫mero m√≠nimo de operaciones
 * (inserci√≥n, eliminaci√≥n, sustituci√≥n) necesarias para transformar
 * un string en otro.
 * 
 * @param str1 - Primer string
 * @param str2 - Segundo string
 * @returns N√∫mero de operaciones necesarias (0 = id√©nticos)
 */
export function levenshteinDistance(str1: string, str2: string): number {
  // Casos base
  if (str1 === str2) return 0;
  if (str1.length === 0) return str2.length;
  if (str2.length === 0) return str1.length;

  // Crear matriz de distancias
  const matrix: number[][] = [];
  
  // Inicializar primera fila y columna
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }

  // Llenar matriz con distancias m√≠nimas
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        // Caracteres iguales, no hay costo
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        // Encontrar operaci√≥n con menor costo
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // Sustituci√≥n
          matrix[i][j - 1] + 1,     // Inserci√≥n
          matrix[i - 1][j] + 1      // Eliminaci√≥n
        );
      }
    }
  }

  return matrix[str2.length][str1.length];
}

/**
 * üìä Calcula el porcentaje de similitud entre dos strings
 * 
 * Convierte la distancia de Levenshtein en un porcentaje de similitud
 * donde 100% = id√©nticos y 0% = completamente diferentes
 * 
 * @param str1 - Primer string
 * @param str2 - Segundo string
 * @returns Porcentaje de similitud (0-100)
 */
export function calculateSimilarity(str1: string, str2: string): number {
  // Normalizar strings para comparaci√≥n justa
  const normalized1 = normalizeText(str1);
  const normalized2 = normalizeText(str2);

  // Casos especiales
  if (normalized1 === normalized2) return 100;
  if (!normalized1 || !normalized2) return 0;

  // Calcular distancia de Levenshtein
  const distance = levenshteinDistance(normalized1, normalized2);
  const maxLength = Math.max(normalized1.length, normalized2.length);

  // Convertir a porcentaje de similitud
  const similarity = ((maxLength - distance) / maxLength) * 100;

  // Bonus para coincidencias exactas (ignorando case y acentos)
  if (normalized1 === normalized2) {
    return Math.min(100, similarity + FUZZY_CONFIG.EXACT_MATCH_BONUS);
  }

  return Math.max(0, Math.round(similarity * 100) / 100); // Redondear a 2 decimales
}

/**
 * üîç Busca palabras parciales dentro de un nombre m√°s largo
 * 
 * √ötil para casos como "Mar√≠a" que deber√≠a encontrar "Mar√≠a Jos√© Gonz√°lez"
 * 
 * @param searchTerm - T√©rmino de b√∫squeda
 * @param fullName - Nombre completo donde buscar
 * @returns Porcentaje de coincidencia parcial
 */
function calculatePartialMatch(searchTerm: string, fullName: string): number {
  const normalizedSearch = normalizeText(searchTerm);
  const normalizedFull = normalizeText(fullName);

  if (!normalizedSearch || !normalizedFull) return 0;

  // Dividir nombres en palabras
  const searchWords = normalizedSearch.split(' ').filter(word => word.length > 1);
  const fullWords = normalizedFull.split(' ').filter(word => word.length > 1);

  if (searchWords.length === 0 || fullWords.length === 0) return 0;

  let totalSimilarity = 0;
  let matchedWords = 0;

  // Para cada palabra del t√©rmino de b√∫squeda
  for (const searchWord of searchWords) {
    let bestWordMatch = 0;

    // Buscar la mejor coincidencia en el nombre completo
    for (const fullWord of fullWords) {
      const wordSimilarity = calculateSimilarity(searchWord, fullWord);
      bestWordMatch = Math.max(bestWordMatch, wordSimilarity);
    }

    // Si la palabra tiene suficiente similitud, contarla
    if (bestWordMatch >= 60) {
      totalSimilarity += bestWordMatch;
      matchedWords++;
    }
  }

  // Calcular promedio ponderado
  if (matchedWords === 0) return 0;

  const averageSimilarity = totalSimilarity / matchedWords;
  const completenessRatio = matchedWords / searchWords.length;

  return averageSimilarity * completenessRatio;
}

/**
 * üéØ B√∫squeda multi-campo: tel√©fono + nombre para mayor precisi√≥n
 * 
 * Estrategia inteligente:
 * 1. Buscar por tel√©fono primero (m√°s confiable)
 * 2. Si no coincide, buscar por nombre con fuzzy matching
 * 3. Verificar compatibilidad entre nombre y tel√©fono
 * 
 * @param searchData - Datos de b√∫squeda (nombre y tel√©fono opcional)
 * @param guests - Array de invitados donde buscar
 * @returns Resultado detallado de la b√∫squeda
 */
export function findBestGuestMatchMultiField(
  searchData: { name: string; phone?: string },
  guests: IGuest[]
): MatchResult | null {
  const { name: searchName, phone: searchPhone } = searchData;
  
  // üîç Validaciones iniciales
  if (!searchName || typeof searchName !== 'string') {
    console.warn('üö® Nombre de b√∫squeda inv√°lido:', searchName);
    return null;
  }

  if (!guests || !Array.isArray(guests) || guests.length === 0) {
    console.warn('üö® Array de invitados vac√≠o o inv√°lido');
    return null;
  }

  console.log(`üîç B√∫squeda multi-campo para "${searchName}"${searchPhone ? ` con tel√©fono ${searchPhone}` : ''}`);

  // üì± PASO 1: B√∫squeda por tel√©fono (si est√° disponible)
  if (searchPhone) {
    const normalizedSearchPhone = normalizePhoneNumber(searchPhone);
    
    for (const guest of guests) {
      if (guest.phone) {
        const normalizedGuestPhone = normalizePhoneNumber(guest.phone);
        
        if (normalizedSearchPhone === normalizedGuestPhone) {
          console.log(`üì± Match por tel√©fono encontrado: "${guest.name}" (${guest.phone})`);
          
          // Verificar si el nombre tambi√©n es similar
          const nameSimilarity = calculateSimilarity(searchName, guest.name);
          
          return {
            guest,
            similarity: 100, // Tel√©fono es match perfecto
            isExactMatch: true,
            matchType: 'exact',
            normalizedSearchName: normalizeText(searchName),
            normalizedGuestName: normalizeText(guest.name),
            matchMethod: 'phone',
            nameSimilarity, // Info adicional
            phoneMatch: true
          };
        }
      }
    }
    
    console.log('üì± No se encontr√≥ match exacto por tel√©fono');
  }

  // üë§ PASO 2: B√∫squeda por nombre (m√©todo original mejorado)
  const nameMatch = findBestGuestMatchByName(searchName, guests);
  
  if (nameMatch && searchPhone) {
    // Verificar compatibilidad de tel√©fono si ambos est√°n disponibles
    if (nameMatch.guest.phone) {
      const guestPhone = normalizePhoneNumber(nameMatch.guest.phone);
      const searchPhoneNorm = normalizePhoneNumber(searchPhone);
      
      if (guestPhone !== searchPhoneNorm) {
        console.log(`‚ö†Ô∏è Conflicto detectado: nombre similar pero tel√©fonos diferentes`);
        console.log(`   Nombre: "${nameMatch.guest.name}" vs "${searchName}" (${nameMatch.similarity}%)`);
        console.log(`   Tel√©fono: ${nameMatch.guest.phone} vs ${searchPhone}`);
        
        // Reducir confianza por conflicto de tel√©fono
        return {
          ...nameMatch,
          similarity: Math.max(0, nameMatch.similarity - 20), // Penalizar conflicto
          matchMethod: 'name_with_phone_conflict',
          phoneMatch: false,
          hasConflict: true
        };
      }
    }
    
    // No hay conflicto, agregar info de tel√©fono
    return {
      ...nameMatch,
      matchMethod: 'name',
      phoneMatch: false
    };
  }

  return nameMatch;
}

/**
 * üî¢ Normaliza n√∫mero de tel√©fono para comparaci√≥n
 */
function normalizePhoneNumber(phone: string): string {
  if (!phone) return '';
  
  // Remover todo excepto d√≠gitos
  const digitsOnly = phone.replace(/\D/g, '');
  
  // Si empieza con 52 (c√≥digo M√©xico), removerlo para comparar localmente
  if (digitsOnly.startsWith('52') && digitsOnly.length === 12) {
    return digitsOnly.substring(2);
  }
  
  return digitsOnly;
}

/**
 * üéØ Encuentra la mejor coincidencia de invitado para un nombre dado (m√©todo original)
 * 
 * Implementa b√∫squeda inteligente con m√∫ltiples estrategias:
 * 1. Coincidencia exacta (100%)
 * 2. Fuzzy matching con Levenshtein
 * 3. Coincidencia parcial de palabras
 * 
 * @param searchName - Nombre a buscar
 * @param guests - Array de invitados donde buscar
 * @returns Mejor coincidencia encontrada o null si no hay match suficiente
 */
export function findBestGuestMatchByName(
  searchName: string,
  guests: IGuest[]
): MatchResult | null {
  // üîç Validaciones iniciales
  if (!searchName || typeof searchName !== 'string') {
    console.warn('üö® Nombre de b√∫squeda inv√°lido:', searchName);
    return null;
  }

  if (!guests || !Array.isArray(guests) || guests.length === 0) {
    console.warn('üö® Array de invitados vac√≠o o inv√°lido');
    return null;
  }

  const normalizedSearchName = normalizeText(searchName);
  
  if (normalizedSearchName.length < FUZZY_CONFIG.MIN_NAME_LENGTH) {
    console.warn('üö® Nombre demasiado corto:', searchName);
    return null;
  }

  // üìä Variables para tracking de estad√≠sticas
  const startTime = Date.now();
  let candidatesEvaluated = 0;
  let bestMatch: MatchResult | null = null;
  let bestSimilarity = 0;

  console.log(`üîç Iniciando b√∫squeda de "${searchName}" entre ${guests.length} invitados`);

  // üéØ B√∫squeda en todos los invitados
  for (const guest of guests) {
    if (!guest.name || typeof guest.name !== 'string') {
      continue; // Saltar invitados con nombres inv√°lidos
    }

    candidatesEvaluated++;
    const normalizedGuestName = normalizeText(guest.name);

    // ü•á Estrategia 1: Coincidencia exacta
    if (normalizedSearchName === normalizedGuestName) {
      const exactMatch: MatchResult = {
        guest,
        similarity: 100,
        isExactMatch: true,
        matchType: 'exact',
        normalizedSearchName,
        normalizedGuestName
      };

      console.log(`üéØ Coincidencia exacta encontrada: "${guest.name}"`);
      return exactMatch; // Retornar inmediatamente en coincidencia exacta
    }

    // ü•à Estrategia 2: Fuzzy matching con Levenshtein
    const fuzzySimilarity = calculateSimilarity(searchName, guest.name);

    // ü•â Estrategia 3: Coincidencia parcial de palabras
    const partialSimilarity = calculatePartialMatch(searchName, guest.name);

    // Tomar la mejor similitud entre fuzzy y partial
    const bestGuestSimilarity = Math.max(fuzzySimilarity, partialSimilarity);

    // Determinar tipo de match
    let matchType: 'exact' | 'fuzzy' | 'partial' = 'fuzzy';
    if (partialSimilarity > fuzzySimilarity) {
      matchType = 'partial';
    }

    // Actualizar mejor match si es mejor que el actual
    if (bestGuestSimilarity > bestSimilarity) {
      bestSimilarity = bestGuestSimilarity;
      bestMatch = {
        guest,
        similarity: bestGuestSimilarity,
        isExactMatch: false,
        matchType,
        normalizedSearchName,
        normalizedGuestName
      };
    }
  }

  // üìä Log de estad√≠sticas de b√∫squeda
  const searchTime = Date.now() - startTime;
  const stats: SearchStats = {
    totalGuests: guests.length,
    searchTime,
    candidatesEvaluated,
    bestSimilarity,
    matchFound: bestMatch !== null && bestSimilarity >= FUZZY_CONFIG.SIMILARITY_THRESHOLD
  };

  console.log('üìä Estad√≠sticas de b√∫squeda:', stats);

  // üéØ Verificar threshold y retornar resultado
  if (bestMatch && bestSimilarity >= FUZZY_CONFIG.SIMILARITY_THRESHOLD) {
    console.log(`‚úÖ Match encontrado: "${bestMatch.guest.name}" (${bestSimilarity.toFixed(1)}% similitud)`);
    return bestMatch;
  }

  console.log(`‚ùå No se encontr√≥ match suficiente. Mejor similitud: ${bestSimilarity.toFixed(1)}%`);
  return null;
}

/**
 * üéØ Funci√≥n principal de b√∫squeda (mantiene compatibilidad)
 * Wrapper que usa la b√∫squeda multi-campo cuando hay tel√©fono
 */
export function findBestGuestMatch(
  searchName: string,
  guests: IGuest[],
  searchPhone?: string
): MatchResult | null {
  if (searchPhone) {
    return findBestGuestMatchMultiField({ name: searchName, phone: searchPhone }, guests);
  } else {
    return findBestGuestMatchByName(searchName, guests);
  }
}

/**
 * üîç Busca m√∫ltiples coincidencias para detectar casos ambiguos
 * 
 * √ötil para identificar cuando hay varios invitados con nombres similares
 * y se necesita crear un nuevo registro en lugar de actualizar uno existente.
 * 
 * @param searchName - Nombre a buscar
 * @param guests - Array de invitados donde buscar
 * @param maxResults - M√°ximo n√∫mero de resultados a retornar (default: 3)
 * @returns Array de coincidencias ordenadas por similitud
 */
export function findMultipleMatches(
  searchName: string,
  guests: IGuest[],
  maxResults: number = 3
): MatchResult[] {
  if (!searchName || !guests || guests.length === 0) {
    return [];
  }

  const normalizedSearchName = normalizeText(searchName);
  const matches: MatchResult[] = [];

  console.log(`üîç Buscando m√∫ltiples coincidencias para "${searchName}"`);

  // Evaluar todos los invitados
  for (const guest of guests) {
    if (!guest.name || typeof guest.name !== 'string') {
      continue;
    }

    const normalizedGuestName = normalizeText(guest.name);
    const fuzzySimilarity = calculateSimilarity(searchName, guest.name);
    const partialSimilarity = calculatePartialMatch(searchName, guest.name);
    const bestSimilarity = Math.max(fuzzySimilarity, partialSimilarity);

    // Solo incluir matches por encima del threshold
    if (bestSimilarity >= FUZZY_CONFIG.SIMILARITY_THRESHOLD) {
      matches.push({
        guest,
        similarity: bestSimilarity,
        isExactMatch: normalizedSearchName === normalizedGuestName,
        matchType: partialSimilarity > fuzzySimilarity ? 'partial' : 'fuzzy',
        normalizedSearchName,
        normalizedGuestName
      });
    }
  }

  // Ordenar por similitud (mayor a menor) y limitar resultados
  const sortedMatches = matches
    .sort((a, b) => b.similarity - a.similarity)
    .slice(0, maxResults);

  console.log(`üìä Encontradas ${sortedMatches.length} coincidencias m√∫ltiples`);
  
  return sortedMatches;
}

/**
 * üß™ Funci√≥n de testing para validar algoritmos
 * 
 * Ejecuta casos de prueba predefinidos para verificar el funcionamiento
 * de los algoritmos de fuzzy matching.
 * 
 * @returns Resultados de las pruebas
 */
export function runFuzzyMatchingTests(): void {
  console.log('üß™ Ejecutando pruebas de Fuzzy Matching...\n');

  const testCases = [
    // Casos de coincidencia exacta
    { search: 'Mar√≠a Jos√©', target: 'Mar√≠a Jos√©', expected: '100' },
    { search: 'MAR√çA JOS√â', target: 'mar√≠a jos√©', expected: '100' },
    
    // Casos sin acentos
    { search: 'Maria Jose', target: 'Mar√≠a Jos√©', expected: '>= 95' },
    { search: 'maria jose', target: 'MAR√çA JOS√â', expected: '>= 95' },
    
    // Casos con errores de tipeo
    { search: 'Maria Jorse', target: 'Mar√≠a Jos√©', expected: '>= 80' },
    { search: 'M√°ria Joss√©', target: 'Mar√≠a Jos√©', expected: '>= 85' },
    
    // Casos de nombres parciales
    { search: 'Mar√≠a', target: 'Mar√≠a Jos√© Gonz√°lez', expected: '>= 80' },
    { search: 'Jos√©', target: 'Mar√≠a Jos√©', expected: '>= 80' },
    
    // Casos sin match
    { search: 'Pedro S√°nchez', target: 'Mar√≠a Jos√©', expected: '< 80' },
    { search: 'Ana', target: 'Roberto Carlos', expected: '< 50' }
  ];

  testCases.forEach((testCase, index) => {
    const similarity = calculateSimilarity(testCase.search, testCase.target);
    const status = evaluateExpectation(similarity, testCase.expected);
    
    console.log(`Test ${index + 1}: ${status ? '‚úÖ' : '‚ùå'}`);
    console.log(`  B√∫squeda: "${testCase.search}"`);
    console.log(`  Objetivo: "${testCase.target}"`);
    console.log(`  Similitud: ${similarity.toFixed(1)}%`);
    console.log(`  Esperado: ${testCase.expected}`);
    console.log('');
  });

  console.log('üß™ Pruebas de Fuzzy Matching completadas\n');
}

/**
 * üìä Eval√∫a si un resultado cumple con la expectativa
 */
function evaluateExpectation(value: number, expectation: string): boolean {
  if (expectation.startsWith('>=')) {
    return value >= parseFloat(expectation.substring(2));
  }
  if (expectation.startsWith('<')) {
    return value < parseFloat(expectation.substring(1));
  }
  return value === parseFloat(expectation);
}

// üéØ Exportar configuraci√≥n para uso externo
export { FUZZY_CONFIG as config };

/**
 * üìù Ejemplo de uso:
 * 
 * ```typescript
 * import { findBestGuestMatch, calculateSimilarity } from '@/utils/fuzzyMatchingUtils';
 * 
 * // Buscar invitado
 * const match = findBestGuestMatch('Maria Jose', allGuests);
 * if (match && match.similarity >= 80) {
 *   console.log(`Invitado encontrado: ${match.guest.name}`);
 * }
 * 
 * // Calcular similitud directa
 * const similarity = calculateSimilarity('Mar√≠a Jos√©', 'Maria Jose');
 * console.log(`Similitud: ${similarity}%`);
 * ```
 */
